// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TenjinSDK
import AdServices
import CoreData
import Foundation
import Network
import Swift
@_exported import TenjinSDK
import _Concurrency
@objc @_inheritsConvenienceInitializers public class QueueEvent : CoreData.NSManagedObject, Swift.Identifiable {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<QueueEvent>
  @objc @NSManaged dynamic public var params: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var date: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endpoint: Swift.String? {
    @objc get
    @objc set
  }
  public var paramsDict: [Swift.String : Any]? {
    get
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@objc public enum PurposeConsentStatus : Swift.Int {
  case ConsentNull
  case ConsentTrue
  case ConsentFalse
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class GDPRHelper : ObjectiveC.NSObject {
  @objc public func getPurposeConsentsTCF() -> Swift.String?
  @objc public func optIn() -> Swift.Bool
  @objc public func getGoogleAdPersonalization() -> PurposeConsentStatus
  @objc public func getGoogleAdUserData() -> PurposeConsentStatus
  @objc public func isGoogleDMADisabled() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RequestHelper : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String)
  @objc public func handlePostRequest(endpoint: Swift.String, params: [Swift.String : Any])
  @objc deinit
}
@objc public protocol TJNRequestSender {
  @objc var defaultPostCompletionBlock: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?, Swift.Bool) -> Swift.Void)? { get set }
  @objc func post(url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?)
  @objc func method(_ method: Swift.String, url: Swift.String, body: Foundation.NSMutableString?)
  @objc func method(_ method: Swift.String, url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?)
  @objc func method(_ method: Swift.String, url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?, completionBlock block: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?, Swift.Bool) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers @objc public class AttributionOperationHelper : ObjectiveC.NSObject {
  @objc public func getAttributionToken(completion: @escaping (Swift.String?, Swift.Error?) -> Swift.Void)
  @objc public func requestAttributionDetails(completion: @escaping ([Swift.String : Any]?, Swift.Error?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension CoreData.NSManagedObjectContext {
  public func executeAndMergeChanges(using batchDeleteRequest: CoreData.NSBatchDeleteRequest) throws
}
@_inheritsConvenienceInitializers @objc public class TenjinDatasource : ObjectiveC.NSObject {
  @objc public static func setBooleanValue(_ value: Swift.Bool, key: Swift.String)
  public static func getOptionalBoolean(_ key: Swift.String) -> Swift.Bool?
  @objc public static func setCacheEventsSetting(_ isCacheEventsEnabled: Swift.Bool)
  @objc public static func getCacheEventsSetting() -> Swift.Bool
  @objc public static func getAnalyticsInstallationId() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TenjinRepository : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String)
  @objc public static func setCacheEventsSetting(_ isRetryEventsEnabled: Swift.Bool)
  @objc public static func getCacheEventsSetting() -> Swift.Bool
  @objc deinit
}
@objc public class TJNHTTPClient : ObjectiveC.NSObject, Foundation.URLSessionDelegate, TJNRequestSender {
  @objc public var defaultPostCompletionBlock: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?, Swift.Bool) -> Swift.Void)?
  @objc public init(apiKey: Swift.String)
  @objc public func post(url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?)
  @objc public func method(_ method: Swift.String, url: Swift.String, body: Foundation.NSMutableString?)
  @objc public func method(_ method: Swift.String, url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?)
  @objc public func method(_ method: Swift.String, url: Swift.String, body: Swift.String?, headers: [Swift.AnyHashable : Any]?, completionBlock block: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?, Swift.Bool) -> Swift.Void)? = nil)
  @objc public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
extension PurposeConsentStatus : Swift.Equatable {}
extension PurposeConsentStatus : Swift.Hashable {}
extension PurposeConsentStatus : Swift.RawRepresentable {}
